name: Django CI/CD Pipeline (Test on Main)

on:
  push:
    branches:
      - main  # Now tests will trigger when pushing to main
      - dev
      - 'feature/*'
      - 'bugfix/*'
      - 'hotfix/*'
      - 'release/*'
      - 'chore/*'
    paths:
      - 'backend/**'
      - 'deployment/**'
      - '.github/**'
  pull_request:
    branches:
      - dev

jobs:
  # 1️⃣ Pre-Commit & Code Review Stage
  pre-commit:
    name: Pre-Commit & Code Review
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests with pytest
        run: pytest

  # 2️⃣ Continuous Integration (CI) Stage
  ci:
    name: Continuous Integration (Integration Tests)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Integration Tests
        run: |
          pytest --maxfail=1 --disable-warnings -q

  # 3️⃣ Build & Containerization Stage
  build:
    name: Build & Containerize
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
      - name: Debug Docker & Docker Compose
        run: |
          docker --version
          docker-compose --version || echo "Docker Compose not installed"

      - name: Build Docker Image
        run: docker build -t myapp:latest .

      - name: Build Docker Compose Services
        run: docker-compose build  # Or use "docker compose build"

  # 4️⃣ Deploy to Production Stage
  deploy-production:  # Fixed indentation here
    name: Deploy to Production
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/chore/deploy-3-container-orchestration'
    environment:
      name: production
      url: ${{ secrets.PRODUCTION_URL }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: SSH and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu
            # Pull the latest code from GitHub

            # If the project is not cloned, clone it
            if [ ! -d "forum-app/.git" ]; then
              git clone https://github.com/g5ESRS/forum-app.git
            fi

            # Navigate to project directory
            cd forum-app

            # Pull the latest code
            git reset --hard
            git checkout chore/deploy-3-container-orchestration
            git pull origin chore/deploy-3-container-orchestration

            # Ensure Docker Compose is up-to-date
            docker-compose pull
            docker-compose up -d --remove-orphans